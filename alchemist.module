<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to manipulate alchemist.
 *
 * This is the main module file for Alchemist.
 */

require_once dirname(__FILE__) . '/includes/alchemist.fieldAdmin.inc';
require_once dirname(__FILE__) . '/includes/alchemist.fieldWidget.inc';

/**
 * Implements hook_field_display_alter();
 */
function alchemist_field_display_alter(&$display, $context){
  if($context['entity_type'] == 'node' && isset($context['entity']->nid) && $node = alchemist_get_node()){
    // All node display fields that are alchemist enabled and match the node
    // being operated should use the alchemist display format.
    if($node->nid == $context['entity']->nid){
      $settings = array(
        'fallback_format' => $display['type'],
        'fallback_settings' => $display['settings'],
      );
      if(isset($node->alchemist_node_fields[$context['field']['field_name']])){
        $settings['alchemist_field'] = $node->alchemist_node_fields[$context['field']['field_name']];
      }
      $display['type'] = 'alchemist';
      $display['settings'] = $settings;
      $display['module'] = 'alchemist';
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function alchemist_page_alter(&$page){
  if(!empty($page['content']['system_main']['#alchemist_cache']) && $node = alchemist_get_node()){
    // We want to cache the entire node object at the last possible moment.
    alchemist_set_cache($node);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function alchemist_preprocess_node(&$vars) {
  if(isset($vars['alchemist_id'])){
    $vars['page'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function alchemist_preprocess_page(&$vars) {
  if(alchemist_valid_path()){
    $vars['node'] = alchemist_get_node();
    $vars['title'] = alchemist_preprocess_page_title($vars);
  }
}

/**
 * Implements hook_menu().
 */
function alchemist_menu() {
  $items = array();
  foreach(alchemist_get_node_types() as $type){
    // Redirect for new node creation.
    $items['node/add/alchemist/' . $type->type] = array(
      'title' => $type->name,
      'page callback' => 'alchemist_page_add_redirect',
      'page arguments' => array(3),
      'access callback' => 'node_access',
      'access arguments' => array('create', $type->type),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.page.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
    // Node creation page with alchemist_id provided.
    $items['node/add/alchemist/' . $type->type . '/%alchemist'] = array(
      'title' => $type->name,
      'page callback' => 'alchemist_page_edit',
      'page arguments' => array(4),
      'load arguments' => array(3),
      'access callback' => 'node_access',
      'access arguments' => array('create', $type->type),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.page.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
  }
  $items['node/%alchemist/alchemist'] = array(
    'title' => 'Alchemist',
    'page callback' => 'alchemist_page_edit',
    'page arguments' => array(1),
    'access callback' => 'alchemist_node_access_check',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'alchemist.page.inc',
    'file path' => drupal_get_path('module', 'alchemist') . '/includes'
  );
  $items['alchemist/%alchemist/%'] = array(
    'title' => 'Alchemist',
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'page callback' => 'alchemist_field_edit',
    'page arguments' => array(1,2),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
    'file' => 'alchemist.fieldEdit.inc',
    'file path' => drupal_get_path('module', 'alchemist') . '/includes'
  );
  return $items;
}

function alchemist_admin_paths() {
  $paths = array(
    'node/add/alchemist/*' => FALSE,
  );
  return $paths;
}

/**
 * Implements hook_menu_alter().
 */
function alchemist_menu_alter(&$items) {
  $types = node_type_get_types();
  foreach(alchemist_get_node_types() as $type){
    $items[ 'node/add/' . $type->type ]['page callback'] = 'alchemist_redirect_create';
    $items[ 'node/add/' . $type->type ]['module'] = 'alchemist';
    unset($items[ 'node/add/' . $type->type ]['file']);
  }
}

/**
 * Determines whether the current user may perform the alchemist operation on
 * the node.
 *
 * @param $op
 *   The operation to be performed on the node. Possible values are:
 *   - "view"
 *   - "update"
 *   - "delete"
 *   - "create"
 * @param $node
 *   The node object on which the operation is to be performed, or node type
 *   (e.g. 'forum') for "create" operation.
 * @param $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function alchemist_node_access_check($op, $node, $account = NULL) {
  $types = alchemist_get_node_types();
  if(isset($types[$node->type])){
    return node_access($op, $node, $account);
  }
  return FALSE;
}

/**
 * Implements hook_fett_icons_alter().
 */
function alchemist_fett_icons_alter(&$icons){
  $icons['Alchemist'] = 'flask';
}

function alchemist_library() {
  $libraries['alchemist'] = array(
    'title' => 'Alchemist',
    'website' => 'http://www.github.com/jacerider',
    'version' => '7.x-2.x',
    'js' => array(
      drupal_get_path('module', 'alchemist') . '/js/alchemist.js' => array('weight' => 100),
      drupal_get_path('module', 'alchemist') . '/js/alchemistField.js' => array('weight' => 100),
    ),
    'css' => array(
      drupal_get_path('module', 'alchemist') . '/css/alchemist.scss' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      array('system', 'drupal.ajax'),
      // array('alchemist', 'alchemist.toolbar'),
    ),
  );
  if(!module_exists('ckeditor')){
    $libraries['ckeditor'] = array(
      'title' => 'CKEditor',
      'website' => 'http://ckeditor.com',
      'version' => '4.4.7',
      'js' => array(
        libraries_get_path('ckeditor') . '/ckeditor.js' => array('preprocess' => FALSE),
      ),
    );
  }
  return $libraries;
}

// /**
//  * Implements hook_theme().
//  */
// function alchemist_theme() {
//   return array(
//     'alchemist_field' => array(
//       'render element' => 'element',
//       'file' => 'alchemist.theme.inc',
//       'path' => drupal_get_path('module', 'alchemist') . '/theme'
//     ),
//   );
// }

////////////////////////////////////////////////////////////////////////////////
// Ctools
////////////////////////////////////////////////////////////////////////////////

/**
* Implements hook_ctools_plugin_directory().
*/
function alchemist_ctools_plugin_directory($module, $plugin) {
  if ($module == 'alchemist') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 *
 * Has plenty options. See ctools/help/plugins-creating.html
 */
function alchemist_ctools_plugin_type() {
  $plugins = array(
    'field' => array(
      'classes' => array('class'),
    ),
  );
  drupal_alter('alchemist_plugin_fields', $plugins);
  return $plugins;
}

/**
 * Fetch metadata for one alchemist plugin by the given name.
 */
function alchemist_get_plugin($plugin_name) {
  ctools_include('plugins');
  $plugin = ctools_get_plugins('alchemist', $plugin_name);
  // If you alter the plugin handler, be sure the new handler is registerd or
  // you include it in some other way.
  drupal_alter('alchemist_plugin', $plugin);
  return $plugin;
}

/**
 * Get alchemist ctools handlers.
 *
 * @param $handler
 * The links handler name.
 */
function alchemist_get_handler($type, $name, $id = NULL) {
  $object_cache = drupal_static(__FUNCTION__);
  if (!isset($object_cache[$name . $id])) {
    ctools_include('plugins');
    $class = ctools_plugin_load_class('alchemist', $type, $name, 'class');
    $class = class_exists($class) ? $class : 'alchemist'.ucfirst($type);
    $all_args = func_get_args();
    $args = array_slice($all_args, 3);
    $object_cache[$name . $id] = new $class($name, $args);
  }
  return $object_cache[$name . $id];
}

/**
 * Get alchemist ctools handler for a field.
 */
function alchemist_get_field_handler($field_type, $node, $field, $instance){
  $type = 'field';
  $name = 'alchemistField_' . $field_type;
  return alchemist_get_handler('field', $name, $field['field_name'], $node, $field, $instance);
}


////////////////////////////////////////////////////////////////////////////////
// Utilities
////////////////////////////////////////////////////////////////////////////////

/**
 * Check if path is a valid alchemist managed path.
 */
function alchemist_valid_path(){
  $valid = &drupal_static(__FUNCTION__);
  if(!isset($valid)){
    $valid = arg(0) == 'node' && arg(2) == 'alchemist';
  }
  return $valid;
}

/**
 * Redirect from node/add/NODE_TYPE to alchemist edit page
 */
function alchemist_redirect_create( $type ){
  drupal_goto('node/add/alchemist/' . $type);
}

/**
 * Create a new node object.
 */
function alchemist_create_entity($bundle, $entity_type = 'node', $alchemist_id = NULL) {
  global $user;
  $values = array(
    'type'     => $bundle,
    'nid'      => NULL,
    'uid'      => $user->uid,
    'name'     => $user->name,
    'title'    => '',
    'created'  => time(),
    'changed'  => time(),
  );
  $entity = entity_create($entity_type, $values);
  $entity->alchemist_id = $alchemist_id ? $alchemist_id : alchemist_get_id($entity);
  return $entity;
}

/**
 * Get id for page.
 */
function alchemist_get_id($node = NULL){
  $id = &drupal_static(__FUNCTION__);
  if(!isset($id)){
    if(empty($node->nid)){
      $id = drupal_random_key();
    }
    else{
      $id = $node->nid;
    }
  }
  return $id;
}

/**
 * Get current alchemist node.
 */
function alchemist_get_node(){
  $node = &drupal_static(__FUNCTION__);
  if(!isset($node)){
    $router_item = menu_get_item();
    if(!empty($router_item['load_functions'])){
      $position = array_search('alchemist_load', $router_item['load_functions']);
      if(!empty($router_item['map'][$position])){
        $node = $router_item ['map'][$position];
      }
    }
  }
  return is_object($node) ? $node : FALSE;
}

/**
 * Get a list of node types that are alchemist enabled.
 *
 * @return array
 *   An array of enabled node types indexed by node type id.
 */
function alchemist_get_node_types(){
  $types = &drupal_static(__FUNCTION__);
  if (!isset($types)) {
    $types = array();
    foreach(node_type_get_types() as $type_id => $type){
      if(variable_get('alchemist_status_' . $type->type, 0)){
        $types[$type_id] = $type;
      }
    }
  }
  return $types;
}

/**
 * Create an editable field when in alchemist mode.
 */
function alchemist_js_editable($field_name, $field_id, $settings = array()){
  $settings = array_filter($settings);
  $settings += array('label' => '');
  drupal_add_js(array('alchemist' => array(
    'fields' => array(
      $field_name => array($field_id => $settings)
  ))), 'setting');
}

/**
 * Implements hook_load().
 */
function alchemist_load($alchemist_id, $bundle = NULL){
  $node = alchemist_get_cache_by_id($alchemist_id);
  if(empty($node)){
    if($bundle){
      $node = alchemist_create_entity($bundle, 'node', $alchemist_id);
      $node->alchemist_id = $alchemist_id;
    }
    // If we don't have a cached node and we are passing in a node id we should
    // load it.
    else if(empty($node) && is_numeric($alchemist_id)){
      $node = node_load($alchemist_id);
      $node->alchemist_id = $alchemist_id;
    }
  }
  return empty($node) ? FALSE : $node;
}

/**
 * Get a field handler by id.
 */
function alchemist_get_handler_by_id($node, $field_id){
  if(isset($node->alchemist_fields)){
    foreach($node->alchemist_fields as $fields){
      foreach($fields as $id => $handler){
        if($id == $field_id){
          return $handler;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Get available fields and their handlers for a given node.
 *
 * @param $limit_fields
 *   An array of fieldnames that can be provided to limit returned results.
 */
function alchemist_build_fields($node){
  $fields = array();
  foreach(alchemist_get_fields($node->type) as $field_name => $field){
    $fields[$field_name] = alchemist_build_field($field_name, $node);
  }
  $node->alchemist_node_fields = $fields;
  return $fields;
}

/**
 * Get a specific field and its handler.
 */
function alchemist_build_field($field_name, $node){
  $fields = alchemist_get_fields($node->type);
  if(isset($fields[$field_name])){
    $field = $fields[$field_name];
    $handler = alchemist_get_field_handler($field['field']['type'], $node, $field['field'], $field['instance']);
    // Store in node.
    $node->alchemist_fields[$field_name][$handler->getId()] = $handler;
    return $handler;
  }
  return NULL;
}

/**
 * Get fields that are alchemist enabled.
 *
 * @return array
 *   An array of enabled fields for a given node bundle keyed by field name and
 *   containing both field and instance data.
 *
 */
function alchemist_get_fields($bundle, $entity_type = 'node'){
  $fields = &drupal_static(__FUNCTION__);
  if (!isset($fields)) {
    $fields = array();
    foreach(field_info_instances($entity_type, $bundle) as $field_name => $instance){
      if(!empty($instance['settings']['alchemist']['status'])){
        $fields[$field_name]['field'] = field_info_field($field_name);
        // Load in global defaults if necessary.
        if(!empty($instance['settings']['alchemist']['default'])){
          $instance['settings']['alchemist']['settings'] = variable_get('alchemist', array());
        }
        $fields[$field_name]['instance'] = $instance;
      }
    }
  }
  return $fields;
}


////////////////////////////////////////////////////////////////////////////////
// Ajax Callbacks
////////////////////////////////////////////////////////////////////////////////

/**
 * Insert HTML into alchemist pane.
 *
 * @param $html
 *   Html to insert into editor.
 * @param $settings
 *   An optional array of settings that will be used for this command only.
 *
 * @return
 *   An array suitable for use with the ajax_render() function.
 */
// function ajax_command_alchemist_edit($html, $settings = NULL) {
//   $messages = theme('status_messages');
//   $html = $messages . $html;
//   return array(
//     'command' => 'alchemistEdit',
//     'data' => $html,
//     'settings' => $settings,
//   );
// }

/**
 * Flag alchemist as being edited.
 *
 * @param $field_id
 *   The unique alchemist field id.
 *
 * @return
 *   An array suitable for use with the ajax_render() function.
 */
function ajax_command_alchemist_editing_start($field_id) {
  return array(
    'command' => 'alchemistEditingStart',
    'field_id' => $field_id,
  );
}

/**
 * Flag alchemist as no longer being edited.
 *
 * @return
 *   An array suitable for use with the ajax_render() function.
 */
function ajax_command_alchemist_editing_stop() {
  return array(
    'command' => 'alchemistEditingStop'
  );
}

////////////////////////////////////////////////////////////////////////////////
// Views
////////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_views_api().
 */
function alchemist_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'alchemist') . '/views',
  );
}


////////////////////////////////////////////////////////////////////////////////
// Cache
////////////////////////////////////////////////////////////////////////////////

/**
 * Set alchemist cache.
 */
function alchemist_set_cache($node){
  $expire = 21600;
  cache_set('alchemist_' . $node->alchemist_id, $node, 'cache_alchemist', REQUEST_TIME + $expire);
}

/**
 * Get alchemist cache.
 */
function alchemist_get_cache($node){
  $cache = &drupal_static(__FUNCTION__);
  if(!isset($cache)){
    if ($cached = cache_get('alchemist_' . $node->alchemist_id, 'cache_alchemist')) {
      $cache = $cached->data;
    }
  }
  return $cache;
}

/**
 * Get cache by alchemist_id.
 */
function alchemist_get_cache_by_id($alchemist_id){
  $node = new stdClass();
  $node->alchemist_id = $alchemist_id;
  return alchemist_get_cache($node);
}

/**
 * Delete alchemist cache.
 */
function alchemist_delete_cache($node){
  cache_clear_all('alchemist_' . $node->alchemist_id, 'cache_alchemist');
}
