<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to manipulate Alchemist.
 *
 * This is the main module file for Alchemist.
 */

require_once dirname(__FILE__) . '/includes/alchemist.nodeTypeAdmin.inc';
require_once dirname(__FILE__) . '/includes/alchemist.fieldAdmin.inc';
require_once dirname(__FILE__) . '/includes/alchemist.fieldFormatter.inc';

/**
 * Implements hook_admin_paths().
 */
function alchemist_admin_paths() {
  $paths = array(
    'node/add/alchemist/*' => FALSE,
  );
  return $paths;
}

/**
 * Implements hook_menu().
 */
function alchemist_menu() {
  $items = array();
  foreach(alchemist_get_node_types() as $type){
    // Node creation page with alchemist_id provided.
    $items['node/add/alchemist/' . $type->type . '/%alchemist'] = array(
      'title' => $type->name,
      'page callback' => 'alchemist_page_edit',
      'page arguments' => array(4),
      'load arguments' => array($type->type),
      'access callback' => 'node_access',
      'access arguments' => array('create', $type->type),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.page.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
  }
  $items['node/%alchemist/alchemist'] = array(
    'title' => 'Alchemist',
    'page callback' => 'alchemist_page_edit',
    'page arguments' => array(1),
    'access callback' => 'alchemist_node_access_check',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'alchemist.page.inc',
    'file path' => drupal_get_path('module', 'alchemist') . '/includes'
  );
  $items['alchemist/%alchemist/%'] = array(
    'title' => 'Alchemist',
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'page callback' => 'alchemist_field_edit',
    'page arguments' => array(1,2),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
    'file' => 'alchemist.fieldEdit.inc',
    'file path' => drupal_get_path('module', 'alchemist') . '/includes'
  );

  $items['admin/config/content/alchemist'] = array(
    'title' => 'Alchemist',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alchemist_settings'),
    'access arguments' => array('administer alchemist'),
    'file' => 'includes/alchemist.admin.inc',
    'description' => t('Configure Alchemist.')
  );
  $items['admin/config/content/alchemist/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function alchemist_menu_alter(&$items) {
  $types = node_type_get_types();
  foreach(alchemist_get_node_types() as $type){
    $items[ 'node/add/' . $type->type ]['page callback'] = 'alchemist_redirect_create';
    $items[ 'node/add/' . $type->type ]['module'] = 'alchemist';
    unset($items[ 'node/add/' . $type->type ]['file']);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function alchemist_preprocess_node(&$vars) {
  if(isset($vars['alchemist_id'])){
    $vars['page'] = TRUE;
  }
}

/**
 * Implements hook_node_insert().
 */
function alchemist_node_insert($node) {
  alchemist_delete_cache($node);
}

/**
 * Implements hook_node_update().
 */
function alchemist_node_update($node) {
  alchemist_node_insert($node);
}

/**
 * Implements hook_preprocess_node().
 */
function alchemist_preprocess_page(&$vars) {
  if(alchemist_valid_path()){
    $vars['node'] = alchemist_get_node();
    $vars['title'] = alchemist_preprocess_page_title($vars);
    // Special consideration for a node that is set as the frontpage.
    if(variable_get('site_frontpage') == 'node/' . arg(1)){
      $vars['is_front'] = TRUE;
    }
  }
  if(!empty($vars['page']['content']['system_main']['#alchemist_cache']) && $node = alchemist_get_node()){
    // We want to cache the entire node object at the last possible moment.
    alchemist_set_cache($node);
  }
}

/**
 * Implements hook_preprocess_html().
 */
function alchemist_preprocess_html(&$vars) {
  if(alchemist_valid_path()){
    // Special consideration for a node that is set as the frontpage.
    if(variable_get('site_frontpage') == 'node/' . arg(1)){
      $vars['is_front'] = TRUE;
      foreach($vars['classes_array'] as &$class){
        if($class == 'not-front'){
          $class = 'front';
        }
      }
    }
  }
}

/**
 * Implements hook_field_display_alter();
 */
function alchemist_field_display_alter(&$display, $context){
  if($context['entity_type'] == 'node' && $node = alchemist_get_node()){
    // All node display fields that are alchemist enabled and match the node
    // being operated should use the alchemist display format.
    if($node->nid == $context['entity']->nid){
      $settings = array(
        'fallback_format' => $display['type'],
        'fallback_settings' => $display['settings'],
      );
      $display['type'] = 'alchemist';
      $display['settings'] = $settings;
      $display['module'] = 'alchemist';
    }
  }
}

/**
 * Redirect from node/add/NODE_TYPE to alchemist edit page.
 */
function alchemist_redirect_create( $bundle ){
  $alchemist_id = alchemist_get_id( NULL, $bundle );
  drupal_goto('node/add/alchemist/' . $bundle . '/' . $alchemist_id);
}

/**
 * Implements hook_fett_icons_alter().
 */
function alchemist_fett_icons_alter(&$icons){
  $icons['Alchemist'] = 'flask';
}


////////////////////////////////////////////////////////////////////////////////
// Access and permissions
////////////////////////////////////////////////////////////////////////////////

/**
 * Determines whether the current user may perform the alchemist operation on
 * the node.
 *
 * @param $op
 *   The operation to be performed on the node. Possible values are:
 *   - "view"
 *   - "update"
 *   - "delete"
 *   - "create"
 * @param $node
 *   The node object on which the operation is to be performed, or node type
 *   (e.g. 'forum') for "create" operation.
 * @param $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function alchemist_node_access_check($op, $node, $account = NULL) {
  $types = alchemist_get_node_types();
  if(isset($types[$node->type])){
    return TRUE;
    return node_access($op, $node, $account);
  }
  return FALSE;
}

/**
 * Helper for node access functions. Will hide all Alchemist scaffolding nodes.
 *
 * @param $query
 *   The query to add conditions to.
 * @param $type
 *   Either 'node' or 'entity' depending on what sort of query it is. See
 *   node_query_node_access_alter() and node_query_entity_field_access_alter()
 *   for more.
 */
function alchemist_query_node_access_alter(QueryAlterableInterface $query){
  if(!alchemist_valid_path()){
    $scaffold_nids = variable_get('alchemist_nids', array());
    if(!empty($scaffold_nids)){
      // $query->condition('nid', $scaffold_nids, 'NOT IN');
    }
  }
}

/**
 * Implements hook_permission().
 */
function alchemist_permission() {
  $permissions = array(
    'administer alchemist' => array(
      'title' => t('Administer Alchemist'),
      'description' => t('Configure all global Alchemist settings.'),
    ),
  );
  return $permissions;
}


////////////////////////////////////////////////////////////////////////////////
// Views
////////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_views_api().
 */
function alchemist_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'alchemist') . '/views',
  );
}


////////////////////////////////////////////////////////////////////////////////
// Scripts
////////////////////////////////////////////////////////////////////////////////

/**
 * Create an editable field when in alchemist mode.
 */
function alchemist_js_editable($field_name, $field_id, $settings = array()){
  $settings = array_filter($settings);
  $settings += array('label' => '');
  drupal_add_js(array('alchemist' => array(
    'fields' => array(
      $field_name => array($field_id => $settings)
  ))), 'setting');
}

/**
 * Implements hook_library().
 */
function alchemist_library() {
  $libraries['alchemist'] = array(
    'title' => 'Alchemist',
    'website' => 'http://www.github.com/jacerider',
    'version' => '7.x-2.x',
    'js' => array(
      drupal_get_path('module', 'alchemist') . '/js/alchemist.js' => array('weight' => 100),
      drupal_get_path('module', 'alchemist') . '/js/alchemistField.js' => array('weight' => 100),
    ),
    'css' => array(
      drupal_get_path('module', 'alchemist') . '/css/alchemist.scss' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      array('system', 'drupal.ajax'),
      // array('alchemist', 'alchemist.toolbar'),
    ),
  );
  if(!module_exists('ckeditor')){
    $libraries['ckeditor'] = array(
      'title' => 'CKEditor',
      'website' => 'http://ckeditor.com',
      'version' => '4.4.7',
      'js' => array(
        libraries_get_path('ckeditor') . '/ckeditor.js' => array('preprocess' => FALSE),
      ),
    );
  }
  return $libraries;
}


////////////////////////////////////////////////////////////////////////////////
// Utilities
////////////////////////////////////////////////////////////////////////////////

/**
 * Check if path is a valid alchemist managed path.
 */
function alchemist_valid_path(){
  return arg(0) == 'node' && arg(2) == 'alchemist';
}

/**
 * Get current Alchemist node.
 */
function alchemist_get_node(){
  $node = &drupal_static(__FUNCTION__);
  if(!isset($node)){
    $router_item = menu_get_item();
    if(!empty($router_item['load_functions'])){
      $position = array_search('alchemist_load', $router_item['load_functions']);
      if(!empty($router_item['map'][$position])){
        $node = $router_item ['map'][$position];
      }
    }
  }
  return is_object($node) ? $node : FALSE;
}

/**
 * Implements hook_load().
 */
function alchemist_load($alchemist_id, $bundle = NULL){
  $nodes = &drupal_static(__FUNCTION__);
  if(!isset($nodes[$alchemist_id]) && $alchemist_id !== 'add'){
    // Check if we have this node cached via alchemist id.
    $node = alchemist_get_cache_by_id($alchemist_id);
    // If we don't, lets fetch the existing node or placeholder.
    if(empty($node)){
      if($bundle && is_string($bundle)){
        // Node loaded.
        $node = new stdClass();
        $node->type = $bundle;
      }
      elseif(is_numeric($alchemist_id)){
        $node = node_load($alchemist_id);
      }
    }
    if(!empty($node)){
      $node->alchemist_id = $alchemist_id;
      foreach(alchemist_get_placeholder($node->type) as $key => $value){
        if(empty($node->{$key})){
          $node->{$key} = $value;
        }
      }
      $nodes[$alchemist_id] = $node;
    }
  }
  return isset($nodes[$alchemist_id]) ? $nodes[$alchemist_id] : FALSE;
}

/**
 * Get id for page.
 *
 * @param $node
 *   The node object
 * @param $bundle
 *   The node type
 */
function alchemist_get_id($node = NULL, $bundle = NULL){
  if($bundle && is_string($bundle)){
    $node = alchemist_get_placeholder($bundle);
    $id = $node->nid . drupal_random_key();
  }
  else{
    $id = isset($node->alchemist_id) ? $node->alchemist_id : $node->nid;
  }
  return $id;
}

/**
 * Get the placeholder node for a Alchemist-enabled content type.
 */
function alchemist_get_placeholder($bundle){
  $settings = variable_get('alchemist_' . $bundle, array());
  if(!empty($settings['nid']) && $node = node_load($settings['nid'])){
    $node->alchemist_id = '';
    return $node;
  }
  return NULL;
}

/**
 * A helper function to allow quick access to Alchemist node type settings.
 *
 * @param $name
 *   The name of the variable to return.
 * @param $default
 *   The default value to use if this variable has never been set.
 * @param $bundle
 *   The node bundle name.
 *
 * @return
 *   The value of the variable. Unserialization is taken care of as necessary.
 */
function alchemist_variable_get($name, $default = NULL, $bundle = NULL){
  $id = 'alchemist';
  if($bundle){
    $id .= '_' . $bundle;
  }
  $variable = variable_get($id);
  return isset($variable[$name]) ? $variable[$name] : $default;
}

/**
 * Get a list of node types that are alchemist enabled.
 *
 * @return array
 *   An array of enabled node types indexed by node type id.
 */
function alchemist_get_node_types(){
  $types = &drupal_static(__FUNCTION__);
  if (!isset($types)) {
    $types = array();
    foreach(node_type_get_types() as $type_id => $type){
      if(alchemist_variable_get('status', 0, $type->type)){
        $types[$type_id] = $type;
      }
    }
  }
  return $types;
}


////////////////////////////////////////////////////////////////////////////////
// Fields and Handlers
////////////////////////////////////////////////////////////////////////////////

/**
 * Get fields that are Alchemist enabled.
 *
 * @param $entity_type
 *   The entity type.
 * @param $bundle
 *   The entity bundle name.
 *
 * @return array
 *   An array of enabled fields for a given node bundle keyed by field name and
 *   containing both field and instance data.
 *
 */
function alchemist_get_fields($entity_type, $bundle){
  $fields = &drupal_static(__FUNCTION__);
  if (!isset($fields)) {
    $fields = array();
    foreach(field_info_instances($entity_type, $bundle) as $field_name => $instance){
      if(!empty($instance['settings']['alchemist']['status'])){
        $fields[$field_name]['field'] = field_info_field($field_name);
        // Load in global defaults if necessary.
        if(!empty($instance['settings']['alchemist']['default'])){
          $instance['settings']['alchemist']['settings'] = variable_get('alchemist', array());
        }
        $fields[$field_name]['instance'] = $instance;
      }
    }
  }
  return $fields;
}

/**
 * Check to see if a field is Alchemist enabled.
 *
 * @param $entity_type
 *   The entity type.
 * @param $bundle
 *   The entity bundle name.
 *
 * @return array
 *   An array containing both field and instance data as keys.
 */
function alchemist_field_enabled($entity_type, $bundle, $field_name){
  if($fields = alchemist_get_fields($entity_type, $bundle)){
    return isset($fields[$field_name]) ? $fields[$field_name] : array();
  }
}

/**
 * Get a fieldable field plugin.
 *
 * @param $node
 *   The node for the operation.
 * @param $field
 *   The field structure for the operation.
 * @param $instance
 *   The instance structure for $field on $node's bundle.
 * @param $langcode
 *   The language associated with $display.
 * @param $display
 *   The display settings to use, as found in the 'display' entry of instance
 *   definitions. The array notably contains the following keys and values;
 *   - type: The name of the formatter to use.
 *   - settings: The array of formatter settings.
 *
 * @return
 *   The Alchemist field plugin.
 */
function alchemist_get_fieldable_plugin($node, $field, $instance, $langcode, $display = 'full') {
  $keys = array('alchemistFieldable_' . $field['type'], 'alchemistFieldable');
  foreach($keys as $key){
    if($plugin = alchemist_get_plugin('fields', $key, $node, $field, $instance, $langcode, $display)){
      $node->alchemist_fields[$field['field_name']][$plugin->id] = $plugin;
      return $plugin;
    }
  }
  return FALSE;
}


/**
 * Get a simple field plugin.
 *
 * @param $node
 *   The node for the operation.
 * @param $field_key
 *   The unique field key used in the form API.
 * @param $label
 *   The name or title of the simple field.
 *
 * @return
 *   The Alchemist field plugin.
 */
function alchemist_get_field_plugin($node, $field_key, $label) {
  $field = array('type' => $field_key, 'field_name' => $field_key);
  $instance = array('label' => $label);
  $keys = array('alchemistField_' . $field['type'], 'alchemistField');
  foreach($keys as $key){
    if($plugin = alchemist_get_plugin('fields', $key, $node, $field, $instance)){
      $node->alchemist_fields[$field['field_name']][$plugin->id] = $plugin;
      return $plugin;
    }
  }
  return FALSE;
}

/**
 * Get a field handler by id.
 *
 * @param $node
 *   The node for the operation.
 * @param $field_id
 *   The unique field id used by this field.
 */
function alchemist_get_field_plugin_by_id($node, $field_id){
  if(isset($node->alchemist_fields)){
    foreach($node->alchemist_fields as $fields){
      foreach($fields as $id => $plugin){
        if($id == $field_id){
          return $plugin;
        }
      }
    }
  }
  return FALSE;
}


////////////////////////////////////////////////////////////////////////////////
// Ajax Callbacks
////////////////////////////////////////////////////////////////////////////////

/**
 * Flag alchemist as being edited.
 *
 * @param $field_id
 *   The unique alchemist field id.
 *
 * @return
 *   An array suitable for use with the ajax_render() function.
 */
function ajax_command_alchemist_editing_start($field_id) {
  return array(
    'command' => 'alchemistEditingStart',
    'field_id' => $field_id,
  );
}

/**
 * Flag alchemist as no longer being edited.
 *
 * @return
 *   An array suitable for use with the ajax_render() function.
 */
function ajax_command_alchemist_editing_stop() {
  return array(
    'command' => 'alchemistEditingStop'
  );
}


////////////////////////////////////////////////////////////////////////////////
// Ctools
////////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_ctools_plugin_type().
 *
 * Has plenty options. See ctools/help/plugins-creating.html
 */
function alchemist_ctools_plugin_type() {
  return array(
    'fields' => array(
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
  );
}

/**
 * Implementation of hook_alchemist_fields().
 *
 * This is a ctools plugins hook.
 */
function alchemist_alchemist_fields(){
  module_load_include('inc', 'alchemist', 'alchemist.plugins');
  return _alchemist_alchemist_fields();
}

/**
 * Fetch metadata for one alchemist plugin by the given name.
 */
function alchemist_get_plugin($type = 'fields', $key) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('alchemist', 'fields');
  if (isset($plugins[$key]) && $class = ctools_plugin_get_class($plugins[$key], 'handler')) {
    // Check that class exists until CTools & registry issues are resolved.
    if (class_exists($class)) {
      $all_args = func_get_args();
      $args = array_slice($all_args, 2);
      return new $class($key, $args);
    }
  }
  return FALSE;
}


////////////////////////////////////////////////////////////////////////////////
// Cache
////////////////////////////////////////////////////////////////////////////////

/**
 * Set alchemist cache.
 */
function alchemist_set_cache($node){
  $expire = 21600;
  cache_set(alchemist_get_id($node), $node, 'cache_alchemist', REQUEST_TIME + $expire);
}

/**
 * Get alchemist cache.
 */
function alchemist_get_cache($node){
  $cache = &drupal_static(__FUNCTION__);
  if(!isset($cache)){
    if ($cached = cache_get(alchemist_get_id($node), 'cache_alchemist')) {
      $cache = $cached->data;
      $cache->alchemist_draft = 1;
    }
  }
  return $cache;
}

/**
 * Get cache by alchemist_id.
 */
function alchemist_get_cache_by_id($alchemist_id){
  $node = new stdClass();
  $node->alchemist_id = $alchemist_id;
  return alchemist_get_cache($node);
}

/**
 * Delete alchemist cache.
 */
function alchemist_delete_cache($node){
  cache_clear_all(alchemist_get_id($node), 'cache_alchemist', TRUE);
}
