<?php

require_once dirname(__FILE__) . '/includes/alchemist.fieldAdmin.inc';
require_once dirname(__FILE__) . '/includes/alchemist.fieldFormatter.inc';

/**
 * Implements hook_init();
 */
function alchemist_init(){
  // if(in_array(arg(0), array('system'))){
  //   drupal_page_is_cacheable(FALSE);
  // }
}

/**
 * Implements hook_menu_alter().
 */
function alchemist_menu_alter(&$items) {
  $types = node_type_get_types();
  foreach(alchemist_get_node_types() as $type){
    $items[ 'node/add/' . $type->type ]['page callback'] = 'alchemist_redirect_create';
    $items[ 'node/add/' . $type->type ]['module'] = 'alchemist';
    unset($items[ 'node/add/' . $type->type ]['file']);
  }
}

/**
 * Implements hook_theme().
 */
function alchemist_theme() {
  return array(
    // 'alchemist_page_form' => array(
    //   'render element' => 'form',
    // ),
    'alchemist_button' => array(
      'render element' => 'element',
      'file' => 'alchemist.theme.inc',
      'path' => drupal_get_path('module', 'alchemist') . '/theme'
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function alchemist_element_info() {
  $types['alchemist_submit'] = array(
    '#input' => TRUE,
    '#name' => 'op',
    '#button_type' => 'submit',
    '#executes_submit_callback' => TRUE,
    '#limit_validation_errors' => FALSE,
    '#process' => array('alchemist_ajax_process_form'),
    '#theme_wrappers' => array('alchemist_button'),
  );
  return $types;
}

function alchemist_ajax_process_form($element, &$form_state) {
  $type = $element['#type'];
  $element['#type'] = 'button';
  $element = ajax_pre_render_element($element);
  $element['#type'] = $type;
  if (!empty($element['#ajax_processed'])) {
    $form_state['cache'] = TRUE;
  }
  return $element;
}

/**
 * Implements hook_forms().
 */
function alchemist_forms($form_id) {
  $forms = array();
  if (preg_match('/^alchemist_field_form_/', $form_id)) {
    $forms[$form_id] = array(
      'callback' => 'alchemist_field_form',
    );
  }
  return $forms;
}

/**
 * Implements hook_menu().
 */
function alchemist_menu() {
  $items = array();
  $types = node_type_get_types();
  foreach(alchemist_get_node_types() as $type){
    // Redirect for new node creation.
    $items['alchemist/add/' . $type->type] = array(
      'title' => $type->name,
      'page callback' => 'alchemist_page_add_redirect',
      'page arguments' => array(2),
      'access callback' => 'node_access',
      'access arguments' => array('create', $type->type),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.page.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
    // Node creation page with alchemist_id provided.
    $items['alchemist/add/' . $type->type . '/%'] = array(
      'title' => $type->name,
      'page callback' => 'alchemist_page_edit',
      'page arguments' => array(2,3),
      'access callback' => 'node_access',
      'access arguments' => array('create', $type->type),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.page.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
  }
  $items['node/%node/alchemist'] = array(
    'title' => 'Alchemist',
    'page callback' => 'alchemist_page_edit',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'alchemist.page.inc',
    'file path' => drupal_get_path('module', 'alchemist') . '/includes'
  );
  $items['alchemist/settings/%'] = array(
    'title' => 'Node Settings',
    'page callback' => 'alchemist_settings_edit',
    'page arguments' => array(2),
    'access callback'  => 'alchemist_access',
    'access arguments' => array('update', 2),
    'type' => MENU_CALLBACK,
    'file' => 'alchemist.page.inc',
    'file path' => drupal_get_path('module', 'alchemist') . '/includes'
  );
  if(module_exists('asset')){
    $items['alchemist/browser/%asset_type'] = array(
      'title' => 'Asset Browser',
      'page callback' => 'alchemist_asset_browser',
      'page arguments' => array(2),
      'access callback' => 'asset_type_access',
      'access arguments' => array('edit', 2),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.asset.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
    $items['alchemist/asset/%asset'] = array(
      'title' => 'Asset Editor',
      'page callback' => 'alchemist_asset',
      'page arguments' => array(2),
      'access callback'  => 'asset_access',
      'access arguments' => array('edit', 2),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.asset.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
    $items['alchemist/asset/%asset/nojs'] = array(
      'title' => 'Asset Editor',
      'page callback' => 'alchemist_asset',
      'page arguments' => array(2,3),
      'access callback'  => 'asset_access',
      'access arguments' => array('edit', 2),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.asset.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
    // Add menu items to add each different type of entity.
    foreach (asset_get_types() as $type) {
      $items['alchemist/asset/' . $type->type] = array(
        'title' => 'Add ' . $type->name,
        'page callback' => 'alchemist_asset',
        'page arguments' => array(2),
        'access callback'  => 'asset_access',
        'access arguments' => array('edit', 2),
        'type' => MENU_CALLBACK,
        'file' => 'alchemist.asset.inc',
        'file path' => drupal_get_path('module', 'alchemist') . '/includes'
      );
      $items['alchemist/asset/' . $type->type . '/nojs'] = array(
        'title' => 'Add ' . $type->name,
        'page callback' => 'alchemist_asset',
        'page arguments' => array(2,3),
        'access callback'  => 'asset_access',
        'access arguments' => array('edit', 2),
        'type' => MENU_CALLBACK,
        'file' => 'alchemist.asset.inc',
        'file path' => drupal_get_path('module', 'alchemist') . '/includes'
      );
    }
    // Default instance
    $items['alchemist/asset/%asset/0'] = array(
      'title' => 'Instance Editor',
      'page callback' => 'alchemist_asset_instance',
      'page arguments' => array(2, 3),
      'access callback' => 'asset_instance_access',
      'access arguments' => array('edit', 3),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.asset.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
    // Specific instance
    $items['alchemist/asset/%asset/%asset_instance'] = array(
      'title' => 'Instance Editor',
      'page callback' => 'alchemist_asset_instance',
      'page arguments' => array(2, 3),
      'access callback' => 'asset_instance_access',
      'access arguments' => array('edit', 3),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.asset.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
    // Fields
    $items['alchemist/field/%/%'] = array(
      'title' => 'Field Editor',
      'page callback' => 'alchemist_field_edit',
      'page arguments' => array(2,3),
      'access callback'  => TRUE,
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.page.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
    // Link
    $items['alchemist/link'] = array(
      'title' => 'Link',
      'page callback' => 'alchemist_link',
      'theme callback' => 'ajax_base_page_theme',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'alchemist.link.inc',
      'file path' => drupal_get_path('module', 'alchemist') . '/includes'
    );
  }
  return $items;
}

/**
 * Alchemist edit access using alchemist_id.
 */
function alchemist_access($op, $alchemist_id){
  $vars = alchemist_get_cache($alchemist_id);
  if(!empty($vars['node'])){
    return node_access($op, $vars['node']);
  }
  return FALSE;
}

/**
 * Implements hook_fett_icons_alter().
 */
function alchemist_fett_icons_alter(&$icons){
  $icons['Alchemist'] = 'flask';
}

/**
 * Implements hook_preprocess_page().
 */
function alchemist_preprocess_page(&$vars){
  if(alchemist_valid_path()){
    if(arg(1) == 'add'){
      $vars['node'] = alchemist_create_node(arg(2));
    }
    if(!empty($vars['node'])){
      module_load_include('inc', 'alchemist', 'includes/alchemist.page');
      _alchemist_preprocess_page($vars);
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function alchemist_preprocess_html(&$vars){
  if(alchemist_valid_path()){
    module_load_include('inc', 'alchemist', 'includes/alchemist.page');
    _alchemist_preprocess_html($vars);
  }
}

/**
 * Implements hook_page_alter().
 */
function alchemist_page_alter(&$page){
  if(alchemist_valid_path()){
    module_load_include('inc', 'alchemist', 'includes/alchemist.page');
    _alchemist_page_alter($page);
  }
}

function alchemist_library() {
  $libraries['alchemist.toolbar'] = array(
    'title' => 'Alchemist Toolbar',
    'version' => '1',
    'js' => array(
      drupal_get_path('module', 'alchemist') . '/js/alchemist.toolbar.js' => array(),
    ),
  );
  if(!module_exists('ckeditor')){
    $libraries['ckeditor'] = array(
      'title' => 'CKEditor',
      'website' => 'http://ckeditor.com',
      'version' => '4.4.2',
      'js' => array(
        libraries_get_path('ckeditor') . '/ckeditor.js' => array(),
      ),
    );
  }
  $libraries['alchemist'] = array(
    'title' => 'Alchemist',
    'website' => 'http://www.github.com/jacerider',
    'version' => '1.0.0',
    'js' => array(
      drupal_get_path('module', 'alchemist') . '/js/alchemist.js' => array('weight' => 100),
    ),
    'css' => array(
      drupal_get_path('module', 'alchemist') . '/css/alchemist.scss' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      array('system', 'drupal.ajax'),
      // array('alchemist', 'alchemist.toolbar'),
    ),
  );
  $libraries['alchemist_textarea'] = array(
    'title' => 'Alchemist Field: Textarea',
    'website' => 'http://www.github.com/jacerider',
    'version' => '1.0.0',
    'js' => array(
      drupal_get_path('module', 'alchemist') . '/js/alchemist.field.textarea.js' => array(),
    ),
    'dependencies' => array(
      array('alchemist', 'alchemist'),
    ),
  );
  $libraries['alchemist_textfield'] = array(
    'title' => 'Alchemist Field: Textfield',
    'website' => 'http://www.github.com/jacerider',
    'version' => '1.0.0',
    'js' => array(
      drupal_get_path('module', 'alchemist') . '/js/alchemist.field.textfield.js' => array(),
    ),
    'dependencies' => array(
      array('alchemist', 'alchemist'),
    ),
  );
  $libraries['alchemist_scrollbar'] = array(
    'title' => 'Alchemist: Scrollbar',
    'website' => 'http://manos.malihu.gr/jquery-custom-content-scroller/',
    'version' => '3.0.3',
    'js' => array(
      drupal_get_path('module', 'alchemist') . '/lib/mCustomScrollbar/jquery.mCustomScrollbar.concat.min.js' => array(),
      drupal_get_path('module', 'alchemist') . '/js/alchemist.scrollbar.js' => array(),
    ),
    'css' => array(
      drupal_get_path('module', 'alchemist') . '/lib/mCustomScrollbar/jquery.mCustomScrollbar.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );
  return $libraries;
}

/**
 * Redirect from node/add/NODE_TYPE to alchemist edit page
 */
function alchemist_redirect_create( $type ){
  drupal_goto('alchemist/add/' . $type);
}

////////////////////////////////////////////////////////////////////////////////
// Tools
////////////////////////////////////////////////////////////////////////////////

/**
 * Creates a Drupal Ajax 'insert/html' command for alchemist panels.
 *
 * @param $html
 *   The data to use with the jQuery html() method.
 * @param $settings
 *   An optional array of settings that will be used for this command only.
 *
 * @return
 *   An array suitable for use with the ajax_render() function.
 *
 * @see http://docs.jquery.com/Attributes/html#val
 */
function ajax_command_alchemist_panel($html, $position, $title = NULL, $settings = NULL) {
  $title = $title ? $title : drupal_get_title();
  $html = theme('status_messages') . $html;
  return array(
    'command' => 'alchemistPanel',
    'data' => $html,
    'title' => $title,
    'settings' => $settings,
    'position' => $position,
  );
}

/**
 * Creates a Drupal Ajax 'insert/html' command for alchemist panels.
 */
function ajax_command_alchemist_panel_left($html, $title = NULL, $settings = NULL) {
  return ajax_command_alchemist_panel($html, 'left', $title, $settings);
}

/**
 * Creates a Drupal Ajax 'insert/html' command for alchemist panels.
 */
function ajax_command_alchemist_panel_top($html, $title = NULL, $settings = NULL) {
  return ajax_command_alchemist_panel($html, 'top', $title, $settings);
}

/**
 * Close an alchemist panel.
 */
function ajax_command_alchemist_panel_close() {
  return array(
    'command' => 'alchemistPanelClose',
  );
}

/**
 * Insert markup into active editor.
 *
 * @param $markup
 *   The markup to insert.
 * @param $settings
 *   An optional array of settings that will be used for this command only.
 */
function ajax_command_alchemist_insert($markup, $settings = NULL) {
  $markup = theme('status_messages') . $markup;
  return array(
    'command' => 'alchemistInsert',
    'markup' => $markup,
    'settings' => $settings,
  );
}

/**
 * Updates an asset instance.
 *
 * @param $aid
 *   The asset id
 * @param $iid
 *   The instance id
 * @param $settings
 *   An optional array of settings that will be used for this command only.
 *
 * @return
 *   An array suitable for use with the ajax_render() function.
 *
 * @see http://docs.jquery.com/Attributes/html#val
 */
function ajax_command_alchemist_asset($aid, $iid = 0, $settings = NULL) {
  $iid = is_null($iid) ? 0 : $iid;
  return array(
    'command' => 'alchemistAsset',
    'aid' => $aid,
    'iid' => $iid,
    'settings' => $settings,
  );
}

////////////////////////////////////////////////////////////////////////////////
// Utilities
////////////////////////////////////////////////////////////////////////////////

function alchemist_valid_path(){
  return arg(0) == 'alchemist' || arg(2) == 'alchemist';
}

function alchemist_get_node_types(){
  $types = &drupal_static(__FUNCTION__);
  if (!isset($types)) {
    foreach(node_type_get_types() as $type_id => $type){
      if(variable_get('alchemist_enable_' . $type->type, 0)){
        $types[$type_id] = $type;
      }
    }
  }
  return $types;
}

function alchemist_get_class_name($field_type){
  return 'alchemistField_' . $field_type;
}

function alchemist_get_handler($field_type, $alchemist_id, $node, $field, $instance, $view_mode = 'full', $langcode = NULL){
  $class = alchemist_get_class_name($field_type);
  if(class_exists($class)){
    $handler = new $class($alchemist_id, $node, $field, $instance, $view_mode, $langcode);
    return $handler;
  }
  return new alchemistField($alchemist_id, $node, $field, $instance, $view_mode, $langcode);
}

/**
 * Create an editable field when in alchemist mode.
 *
 * @param $settings
 *   Settings is an array of options and should include a key of field_name
 *   at the minimum. Other keys include label and dark.
 */
function alchemist_create_field_editable($selector, $settings = array()){
  $settings = array_filter($settings);
  $settings['label'] = !empty($settings['label']) ? ' ' . $settings['label'] : '';
  drupal_add_js(array('alchemist' => array(
    'editable' => array(
      $selector => $settings
  ))), 'setting');
}

/**
 * Create a new node object.
 */
function alchemist_create_node($bundle) {
  global $user;
  // entity_create replaces the procedural steps in the first example of
  // creating a new object $node and setting its 'type' and uid property
  $values = array(
    'nid'      => NULL,
    'type'     => $bundle,
    'uid'      => $user->uid,
    'name'     => $user->name,
    'revision' => 0,
    'title'    => '',
    'created'  => time(),
    'changed'  => time(),
    'status'   => 1,
    'comment'  => 0,
    'promote'  => 0,
    'is_new'   => 1,
  );
  $entity = entity_create('node', $values);
  return $entity;
}

/**
 * Get alchemist cache.
 */
function alchemist_set_cache($alchemist_id, $node){
  $expire = 21600;
  cache_set($alchemist_id, $node, 'cache', REQUEST_TIME + $expire);
}

/**
 * Set alchemist cache.
 */
function alchemist_get_cache($alchemist_id){
  $cache = &drupal_static(__FUNCTION__);
  if(!isset($cache)){
    if ($cached = cache_get($alchemist_id, 'cache')) {
      $cache = $cached->data;
    }
  }
  return $cache;
}

/**
 * Delete alchemist cache.
 */
function alchemist_delete_cache($alchemist_id){
  cache_clear_all($alchemist_id, 'cache');
}
